//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GnomeKingLand"",
            ""id"": ""08078b37-e7c5-4478-b5e3-6fade14d9b23"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5cea552d-c04f-45bb-99d7-665d73142d91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""925871a0-7fda-42fa-b0da-e52616808630"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""f16771fb-817a-494e-9b0f-e3fb696c76d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StackGnomes"",
                    ""type"": ""Button"",
                    ""id"": ""26087c6c-7f76-47de-a770-37a9e5ff9eba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""038bfd46-87b5-42b2-988c-4953ad5d3c58"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5972d9cd-1353-492b-b1aa-4f599e0a719b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6dd7a467-a3ac-4a54-bbf8-063f0b3c65ed"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db46c130-3fb9-430e-83e6-083bc8745361"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""97195e9b-9915-4c64-8639-c1fc55983099"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e3457b58-b5a5-48e1-90fa-ecd9ac844431"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f391cdfc-0983-48e7-8d26-9efe453b98de"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd73be80-0111-4e4e-b71b-9dba96007847"",
                    ""path"": ""f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StackGnomes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""c7d7bc18-42e1-4e0a-ab06-8e93d336a07b"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // GnomeKingLand
        m_GnomeKingLand = asset.FindActionMap("GnomeKingLand", throwIfNotFound: true);
        m_GnomeKingLand_Movement = m_GnomeKingLand.FindAction("Movement", throwIfNotFound: true);
        m_GnomeKingLand_Jump = m_GnomeKingLand.FindAction("Jump", throwIfNotFound: true);
        m_GnomeKingLand_Crouch = m_GnomeKingLand.FindAction("Crouch", throwIfNotFound: true);
        m_GnomeKingLand_StackGnomes = m_GnomeKingLand.FindAction("StackGnomes", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GnomeKingLand
    private readonly InputActionMap m_GnomeKingLand;
    private List<IGnomeKingLandActions> m_GnomeKingLandActionsCallbackInterfaces = new List<IGnomeKingLandActions>();
    private readonly InputAction m_GnomeKingLand_Movement;
    private readonly InputAction m_GnomeKingLand_Jump;
    private readonly InputAction m_GnomeKingLand_Crouch;
    private readonly InputAction m_GnomeKingLand_StackGnomes;
    public struct GnomeKingLandActions
    {
        private @InputActions m_Wrapper;
        public GnomeKingLandActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GnomeKingLand_Movement;
        public InputAction @Jump => m_Wrapper.m_GnomeKingLand_Jump;
        public InputAction @Crouch => m_Wrapper.m_GnomeKingLand_Crouch;
        public InputAction @StackGnomes => m_Wrapper.m_GnomeKingLand_StackGnomes;
        public InputActionMap Get() { return m_Wrapper.m_GnomeKingLand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GnomeKingLandActions set) { return set.Get(); }
        public void AddCallbacks(IGnomeKingLandActions instance)
        {
            if (instance == null || m_Wrapper.m_GnomeKingLandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GnomeKingLandActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @StackGnomes.started += instance.OnStackGnomes;
            @StackGnomes.performed += instance.OnStackGnomes;
            @StackGnomes.canceled += instance.OnStackGnomes;
        }

        private void UnregisterCallbacks(IGnomeKingLandActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @StackGnomes.started -= instance.OnStackGnomes;
            @StackGnomes.performed -= instance.OnStackGnomes;
            @StackGnomes.canceled -= instance.OnStackGnomes;
        }

        public void RemoveCallbacks(IGnomeKingLandActions instance)
        {
            if (m_Wrapper.m_GnomeKingLandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGnomeKingLandActions instance)
        {
            foreach (var item in m_Wrapper.m_GnomeKingLandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GnomeKingLandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GnomeKingLandActions @GnomeKingLand => new GnomeKingLandActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    public struct MenuActions
    {
        private @InputActions m_Wrapper;
        public MenuActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IGnomeKingLandActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnStackGnomes(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
    }
}
